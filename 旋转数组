class Solution {
      public void rotate(int[] nums, int k) {
    if (k > nums.length) {
      k %= nums.length;
    }
    if (k == 0 || k == nums.length) {
      return;
    }
    int step = k;
    while (step < nums.length) {
      for (int i = 0, j = step; i < k; i++, j = (j + 1) % nums.length) {
        int tmp = nums[j];
        nums[j] = nums[i];
        nums[i] = tmp;
      }
      step += k;
    }

    int n = nums.length % k;
    if (n == 0) {
      return;
    }
    int k1 = k % n;
    int start = k - n;
    int[] copy = new int[n];
    System.arraycopy(nums, start, copy, 0, n);
    rotate(copy, k1);
    System.arraycopy(copy, 0, nums, start, n);
  }
}

class Solution {
    

  public void rotate(int[] nums, int k) {
    rotate(nums, 0, nums.length, k);
  }

  private void rotate(int[] nums, int start, int len, int k) {
    if (k > len) {
      k %= len;
    }
    if (k == 0 || k == len) {
      return;
    }

    int step = k;
    while (step < len) {
      for (int i = 0, j = step; i < k; i++, j = (j + 1) % len) {
        int tmp = nums[start + j];
        nums[start + j] = nums[start + i];
        nums[start + i] = tmp;
      }
      step += k;
    }

    int n = len % k;
    if (n == 0) {
      return;
    }
    int k1 = k % n;
    rotate(nums, start + k - n, n, k1);
  }
}

// 临时数组
class Solution {
    
  public void rotate(int[] nums, int k) {
    int[] tmp = new int[nums.length];
    for (int i = 0; i < nums.length; i++) {
      tmp[(i + k) % nums.length] = nums[i];
    }
    System.arraycopy(tmp, 0, nums, 0, nums.length);
  }
}

// 反转
class Solution {
    
  public void rotate(int[] nums, int k) {
        if (k > nums.length) {
        k %= nums.length;
        }
    if (k == 0 || k == nums.length) {
        return;
    }
      invert(nums, 0, nums.length);
      invert(nums, 0, k);
      invert(nums, k, nums.length - k);
  }

  private void invert(int[] nums, int start, int len) {
      for (int i = start, j = start + len - 1; i < j; i++, j--) {
          exchange(nums, i, j);
      }
  }

  private void exchange(int[] nums, int i, int j) {
      int tmp = nums[i];
      nums[i] = nums[j];
      nums[j] = tmp;
  }
}

class Solution {
    
  public void rotate(int[] nums, int k) {
    int origin, target = 0, extraSlot = nums[0];
    boolean[] visited = new boolean[nums.length];
    while (true) {
      origin = target;
      target = (origin + k) % nums.length;
      if (visited[target]) {
        int i = 0;
        while (i < nums.length && visited[(target + i) % nums.length]) {
          i++;
        }
        target = (target + i) % nums.length;
        if (visited[target]) {
          break; // all visited
        }
        extraSlot = nums[target];
        continue;
      } else {
        visited[target] = true;
      }
      int tmp = nums[target];
      nums[target] = extraSlot;
      extraSlot = tmp;
    }
  }
}
