class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> s = new HashSet();
        for (int num : nums) {
            if (!s.add(num)) {
                return true;
            }
        }
        return false;
    }
}

class Solution {
    
  public boolean containsDuplicate(int[] nums) {
    int[][] table = new int[nums.length][];
    for (int num : nums) {
      int p = (num ^ (num >>> 16)) & (nums.length - 1);
      if (table[p] == null) {
        table[p] = new int[]{num};
      } else {
        for (int tableNum : table[p]) {
          if (tableNum == num) {
            return true;
          }
        }
        int[] tmp = new int[table[p].length + 1];
        System.arraycopy(table[p], 0, tmp, 0, table[p].length);
        tmp[tmp.length - 1] = num;
        table[p] = tmp;
      }
    }
    return false;
  }
}

class Solution {
    
  public boolean containsDuplicate(int[] nums) {
    int[][] table = new int[nums.length][];
    for (int num : nums) {
      int p = (num ^ (num >>> 16)) & (nums.length - 1);
      if (table[p] == null) {
        table[p] = new int[]{1, num}; // fist element means last element's idx
      } else {
        int[] arrayInSameSlot = table[p];
        for (int i = 1; i <= arrayInSameSlot[0]; i++) {
          if (arrayInSameSlot[i] == num) {
            return true;
          }
        }
        if (arrayInSameSlot[0] + 1 < arrayInSameSlot.length) {
          arrayInSameSlot[++arrayInSameSlot[0]] = num;
        } else {
          // extend
          int[] tmp = new int[arrayInSameSlot.length * 2];
          System.arraycopy(arrayInSameSlot, 0, tmp, 0, arrayInSameSlot.length);
          // add number
          tmp[++tmp[0]] = num;
          table[p] = tmp;
        }
      }
    }
    return false;
  }
}

class Solution {
    
  public boolean containsDuplicate(int[] nums) {
    int[] table = new int[nums.length];
    int count0 = 0;
    for (int num : nums) {
      if (num == 0) {
        count0++;
        if (count0 == 2) {
          return true;
        }
      } else {
        int p = num % nums.length;
        if (p < 0) {
          p += nums.length;
        }
        int i = 0;
        while (true) {
          if (i == nums.length) {
            throw new IllegalStateException();
          }
          if (table[p] == 0) {
            table[p] = num;
            break;
          } else if (table[p] == num) {
            return true;
          }
          p = (p + 1) % nums.length;
          i++;
        }
      }
    }
    return false;
  }
}
