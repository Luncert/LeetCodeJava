class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> s = new HashSet();
        for (int num : nums) {
            if (!s.add(num)) {
                return true;
            }
        }
        return false;
    }
}

class Solution {
    
  public boolean containsDuplicate(int[] nums) {
    int[][] table = new int[nums.length][];
    for (int num : nums) {
      int p = (num ^ (num >>> 16)) & (nums.length - 1);
      if (table[p] == null) {
        table[p] = new int[]{num};
      } else {
        for (int tableNum : table[p]) {
          if (tableNum == num) {
            return true;
          }
        }
        int[] tmp = new int[table[p].length + 1];
        System.arraycopy(table[p], 0, tmp, 0, table[p].length);
        tmp[tmp.length - 1] = num;
        table[p] = tmp;
      }
    }
    return false;
  }
}
